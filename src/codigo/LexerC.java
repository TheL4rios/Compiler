/* The following code was generated by JFlex 1.7.0 */

package codigo;
import java.util.ArrayList;
import java.awt.Color;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/jesus/OneDrive/Escritorio/Analizador_RoboTec/src/codigo/LexerC.flex</tt>
 */
class LexerC {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\3\1\10\1\10\1\3\22\0\1\2\7\0\1\60"+
    "\1\60\1\5\1\63\1\64\1\7\1\56\1\6\1\4\1\36\1\36"+
    "\1\36\1\36\5\4\1\0\1\65\1\61\1\62\1\61\2\0\1\50"+
    "\1\1\1\44\1\47\1\31\1\51\2\1\1\45\2\1\1\52\1\46"+
    "\1\41\1\34\1\37\1\1\1\32\1\30\1\42\1\43\1\33\1\1"+
    "\1\40\2\1\1\0\1\63\2\0\1\35\1\0\1\13\1\21\1\55"+
    "\1\14\1\26\1\1\1\11\1\1\1\53\2\1\1\22\1\20\1\16"+
    "\1\15\1\24\1\1\1\12\1\23\1\54\1\17\1\27\1\1\1\25"+
    "\2\1\1\60\1\0\1\60\7\0\1\10\52\0\1\57\20\0\1\1"+
    "\7\0\1\1\3\0\1\1\3\0\1\1\1\0\1\1\6\0\1\1"+
    "\1\0\1\1\4\0\1\1\7\0\1\1\3\0\1\1\3\0\1\1"+
    "\1\0\1\1\6\0\1\1\1\0\1\1\u1f2b\0\1\10\1\10\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\5\17\2\1\6"+
    "\1\5\1\7\1\2\1\0\1\10\2\6\25\2\1\4"+
    "\1\6\5\2\1\11\10\2\1\12\6\2\1\6\2\2"+
    "\1\13\12\2\1\14\4\2\1\15\12\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\242\0\66\0\330\0\u010e"+
    "\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\66"+
    "\0\u046e\0\66\0\66\0\u04a4\0\66\0\u04da\0\u0510\0\u0546"+
    "\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u04a4\0\u09b4\0\u09ea\0\u0a20"+
    "\0\u0a56\0\u0a8c\0\u0ac2\0\154\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\154\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\154\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e"+
    "\0\u1074\0\154\0\u10aa\0\u10e0\0\u1116\0\u114c\0\154\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\0"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\2\3\1\16"+
    "\1\3\1\17\4\3\1\20\2\3\1\21\2\3\1\5"+
    "\1\22\4\3\1\23\1\3\1\24\2\3\1\25\1\3"+
    "\1\26\1\3\1\27\2\2\1\30\2\31\1\6\1\32"+
    "\1\33\67\0\1\3\2\0\1\3\4\0\45\3\11\0"+
    "\1\3\2\0\1\5\4\0\25\3\1\5\17\3\1\34"+
    "\1\35\13\0\1\36\67\0\1\37\57\0\1\3\2\0"+
    "\1\3\4\0\1\3\1\40\40\3\1\41\2\3\11\0"+
    "\1\3\2\0\1\3\4\0\15\3\1\42\27\3\11\0"+
    "\1\3\2\0\1\3\4\0\1\43\44\3\11\0\1\3"+
    "\2\0\1\3\4\0\42\3\1\44\2\3\11\0\1\3"+
    "\2\0\1\3\4\0\6\3\1\45\36\3\11\0\1\3"+
    "\2\0\1\3\4\0\4\3\1\46\1\3\1\47\36\3"+
    "\11\0\1\3\2\0\1\3\4\0\4\3\1\50\6\3"+
    "\1\51\1\3\1\52\27\3\11\0\1\3\2\0\1\3"+
    "\4\0\20\3\1\53\5\3\1\54\16\3\11\0\1\3"+
    "\2\0\1\3\4\0\20\3\1\55\24\3\11\0\1\3"+
    "\2\0\1\3\4\0\34\3\1\56\10\3\11\0\1\3"+
    "\2\0\1\3\4\0\20\3\1\57\24\3\11\0\1\3"+
    "\2\0\1\3\4\0\20\3\1\60\24\3\11\0\1\3"+
    "\2\0\1\3\4\0\37\3\1\61\5\3\11\0\1\3"+
    "\2\0\1\3\4\0\3\3\1\62\41\3\11\0\1\3"+
    "\2\0\1\3\4\0\6\3\1\63\33\3\1\64\2\3"+
    "\72\0\1\6\7\0\1\65\31\0\1\65\27\0\5\36"+
    "\1\66\60\36\3\37\1\0\4\37\1\0\55\37\1\0"+
    "\1\3\2\0\1\3\4\0\2\3\1\67\42\3\11\0"+
    "\1\3\2\0\1\3\4\0\1\3\1\70\43\3\11\0"+
    "\1\3\2\0\1\3\4\0\12\3\1\71\32\3\11\0"+
    "\1\3\2\0\1\3\4\0\2\3\1\72\42\3\11\0"+
    "\1\3\2\0\1\3\4\0\12\3\1\73\32\3\11\0"+
    "\1\3\2\0\1\3\4\0\7\3\1\74\35\3\11\0"+
    "\1\3\2\0\1\3\4\0\4\3\1\75\40\3\11\0"+
    "\1\3\2\0\1\3\4\0\44\3\1\76\11\0\1\3"+
    "\2\0\1\3\4\0\11\3\1\77\33\3\11\0\1\3"+
    "\2\0\1\3\4\0\1\3\1\100\43\3\11\0\1\3"+
    "\2\0\1\3\4\0\1\3\1\101\43\3\11\0\1\3"+
    "\2\0\1\3\4\0\21\3\1\102\23\3\11\0\1\3"+
    "\2\0\1\3\4\0\21\3\1\103\23\3\11\0\1\3"+
    "\2\0\1\3\4\0\21\3\1\104\23\3\11\0\1\3"+
    "\2\0\1\3\4\0\20\3\1\105\24\3\11\0\1\3"+
    "\2\0\1\3\4\0\30\3\1\106\14\3\11\0\1\3"+
    "\2\0\1\3\4\0\31\3\1\107\13\3\11\0\1\3"+
    "\2\0\1\3\4\0\41\3\1\110\3\3\11\0\1\3"+
    "\2\0\1\3\4\0\15\3\1\111\27\3\11\0\1\3"+
    "\2\0\1\3\4\0\15\3\1\112\27\3\11\0\1\3"+
    "\2\0\1\3\4\0\44\3\1\113\10\0\5\36\1\114"+
    "\1\30\57\36\1\0\1\3\2\0\1\3\4\0\3\3"+
    "\1\115\41\3\11\0\1\3\2\0\1\3\4\0\2\3"+
    "\1\116\42\3\11\0\1\3\2\0\1\3\4\0\15\3"+
    "\1\73\27\3\11\0\1\3\2\0\1\3\4\0\1\3"+
    "\1\41\43\3\11\0\1\3\2\0\1\3\4\0\43\3"+
    "\1\117\1\3\11\0\1\3\2\0\1\3\4\0\11\3"+
    "\1\74\33\3\11\0\1\3\2\0\1\3\4\0\11\3"+
    "\1\120\33\3\11\0\1\3\2\0\1\3\4\0\43\3"+
    "\1\70\1\3\11\0\1\3\2\0\1\3\4\0\4\3"+
    "\1\121\40\3\11\0\1\3\2\0\1\3\4\0\16\3"+
    "\1\115\26\3\11\0\1\3\2\0\1\3\4\0\22\3"+
    "\1\122\22\3\11\0\1\3\2\0\1\3\4\0\23\3"+
    "\1\123\21\3\11\0\1\3\2\0\1\3\4\0\36\3"+
    "\1\124\6\3\11\0\1\3\2\0\1\3\4\0\31\3"+
    "\1\125\13\3\11\0\1\3\2\0\1\3\4\0\21\3"+
    "\1\126\23\3\11\0\1\3\2\0\1\3\4\0\17\3"+
    "\1\126\25\3\11\0\1\3\2\0\1\3\4\0\5\3"+
    "\1\127\37\3\11\0\1\3\2\0\1\3\4\0\1\3"+
    "\1\130\43\3\11\0\1\3\2\0\1\3\4\0\11\3"+
    "\1\131\33\3\10\0\5\36\1\114\60\36\1\0\1\3"+
    "\2\0\1\3\4\0\4\3\1\74\40\3\11\0\1\3"+
    "\2\0\1\3\4\0\1\3\1\117\43\3\11\0\1\3"+
    "\2\0\1\3\4\0\15\3\1\132\27\3\11\0\1\3"+
    "\2\0\1\3\4\0\14\3\1\74\30\3\11\0\1\3"+
    "\2\0\1\3\4\0\23\3\1\133\21\3\11\0\1\3"+
    "\2\0\1\3\4\0\27\3\1\134\15\3\11\0\1\3"+
    "\2\0\1\3\4\0\37\3\1\135\5\3\11\0\1\3"+
    "\2\0\1\3\4\0\34\3\1\136\10\3\11\0\1\3"+
    "\2\0\1\3\4\0\23\3\1\105\21\3\11\0\1\3"+
    "\2\0\1\3\4\0\43\3\1\137\1\3\11\0\1\3"+
    "\2\0\1\3\4\0\13\3\1\140\31\3\11\0\1\3"+
    "\2\0\1\3\4\0\4\3\1\132\40\3\11\0\1\3"+
    "\2\0\1\3\4\0\24\3\1\141\20\3\11\0\1\3"+
    "\2\0\1\3\4\0\24\3\1\142\20\3\11\0\1\3"+
    "\2\0\1\3\4\0\36\3\1\105\6\3\11\0\1\3"+
    "\2\0\1\3\4\0\35\3\1\105\7\3\11\0\1\3"+
    "\2\0\1\3\4\0\4\3\1\137\40\3\11\0\1\3"+
    "\2\0\1\3\4\0\25\3\1\105\17\3\11\0\1\3"+
    "\2\0\1\3\4\0\17\3\1\143\1\144\2\3\1\145"+
    "\4\3\1\146\14\3\11\0\1\3\2\0\1\3\4\0"+
    "\32\3\1\147\12\3\11\0\1\3\2\0\1\3\4\0"+
    "\17\3\1\150\25\3\11\0\1\3\2\0\1\3\4\0"+
    "\20\3\1\144\24\3\11\0\1\3\2\0\1\3\4\0"+
    "\23\3\1\151\21\3\11\0\1\3\2\0\1\3\4\0"+
    "\21\3\1\105\23\3\11\0\1\3\2\0\1\3\4\0"+
    "\31\3\1\56\13\3\11\0\1\3\2\0\1\3\4\0"+
    "\21\3\1\150\23\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5022];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\21\1\1\11"+
    "\1\1\2\11\1\0\1\11\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<TextoColor> textoC = Compilador.textoC;  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerC(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 272) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(255, 0, 0)));
            } 
            // fall through
          case 14: break;
          case 2: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(40, 40, 40)));
            } 
            // fall through
          case 15: break;
          case 3: 
            { /*Ignore*/
            } 
            // fall through
          case 16: break;
          case 4: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(35, 120, 147)));
            } 
            // fall through
          case 17: break;
          case 5: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(42, 247, 10)));
            } 
            // fall through
          case 18: break;
          case 6: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(146, 146, 146)));
            } 
            // fall through
          case 19: break;
          case 7: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(169, 155, 179)));
            } 
            // fall through
          case 20: break;
          case 8: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(150, 0, 80)));
            } 
            // fall through
          case 21: break;
          case 9: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(148, 58, 173)));
            } 
            // fall through
          case 22: break;
          case 10: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(1, 115, 1)));
            } 
            // fall through
          case 23: break;
          case 11: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(17, 94, 153)));
            } 
            // fall through
          case 24: break;
          case 12: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(212, 129, 6)));
            } 
            // fall through
          case 25: break;
          case 13: 
            { textoC.add(new TextoColor(yychar, yylength(), new Color(102, 41, 120)));
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
